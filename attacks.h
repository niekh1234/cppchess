/*TODO:
 Create
    -pawn attacks
    -knight attacks
    -king attacks

    -Naive (slow) rook attacks (for magic tables)
    -Naive (slow) bishop attacks (for magic tables)

    -Init rook masks
    -Init bishop masks
 
 
 
 */

#ifndef ATTACKS_H
#define ATTACKS_H

#include <bitboard.h>

namespace nnchesslib
{
   namespace Attacks
   {
      extern U64 rookMasks[64];
      extern U64 bishopMasks[64];

      extern U64 rookTable[64][4096];
      extern U64 bishopTable[64][1024];

      extern U64 nonSlidingAttacks[2][3][64];

      const U64 rookMagics[64] = {
         0x0080001020400080, 0x0040001000200040, 0x0080081000200080, 0x0080040800100080,
         0x0080020400080080, 0x0080010200040080, 0x0080008001000200, 0x0080002040800100,
         0x0000800020400080, 0x0000400020005000, 0x0000801000200080, 0x0000800800100080,
         0x0000800400080080, 0x0000800200040080, 0x0000800100020080, 0x0000800040800100,
         0x0000208000400080, 0x0000404000201000, 0x0000808010002000, 0x0000808008001000,
         0x0000808004000800, 0x0000808002000400, 0x0000010100020004, 0x0000020000408104,
         0x0000208080004000, 0x0000200040005000, 0x0000100080200080, 0x0000080080100080,
         0x0000040080080080, 0x0000020080040080, 0x0000010080800200, 0x0000800080004100,
         0x0000204000800080, 0x0000200040401000, 0x0000100080802000, 0x0000080080801000,
         0x0000040080800800, 0x0000020080800400, 0x0000020001010004, 0x0000800040800100,
         0x0000204000808000, 0x0000200040008080, 0x0000100020008080, 0x0000080010008080,
         0x0000040008008080, 0x0000020004008080, 0x0000010002008080, 0x0000004081020004,
         0x0000204000800080, 0x0000200040008080, 0x0000100020008080, 0x0000080010008080,
         0x0000040008008080, 0x0000020004008080, 0x0000800100020080, 0x0000800041000080,
         0x00FFFCDDFCED714A, 0x007FFCDDFCED714A, 0x003FFFCDFFD88096, 0x0000040810002101,
         0x0001000204080011, 0x0001000204000801, 0x0001000082000401, 0x0001FFFAABFAD1A2
      };

      const U64 bishopMagics[64] = {
         0x0002020202020200, 0x0002020202020000, 0x0004010202000000, 0x0004040080000000,
         0x0001104000000000, 0x0000821040000000, 0x0000410410400000, 0x0000104104104000,
         0x0000040404040400, 0x0000020202020200, 0x0000040102020000, 0x0000040400800000,
         0x0000011040000000, 0x0000008210400000, 0x0000004104104000, 0x0000002082082000,
         0x0004000808080800, 0x0002000404040400, 0x0001000202020200, 0x0000800802004000,
         0x0000800400A00000, 0x0000200100884000, 0x0000400082082000, 0x0000200041041000,
         0x0002080010101000, 0x0001040008080800, 0x0000208004010400, 0x0000404004010200,
         0x0000840000802000, 0x0000404002011000, 0x0000808001041000, 0x0000404000820800,
         0x0001041000202000, 0x0000820800101000, 0x0000104400080800, 0x0000020080080080,
         0x0000404040040100, 0x0000808100020100, 0x0001010100020800, 0x0000808080010400,
         0x0000820820004000, 0x0000410410002000, 0x0000082088001000, 0x0000002011000800,
         0x0000080100400400, 0x0001010101000200, 0x0002020202000400, 0x0001010101000200,
         0x0000410410400000, 0x0000208208200000, 0x0000002084100000, 0x0000000020880000,
         0x0000001002020000, 0x0000040408020000, 0x0004040404040000, 0x0002020202020000,
         0x0000104104104000, 0x0000002082082000, 0x0000000020841000, 0x0000000000208800,
         0x0000000010020200, 0x0000000404080200, 0x0000040404040400, 0x0002020202020200   
      };

      void initAllAttacks();

      U64 genBlockers(int index, U64 mask);

      void initRookMasks();
      void initBishopMasks();

      void initRookMagics();
      void initBishopMagics();

      U64 getRookAttacksRays(int sq, U64 blockers);
      U64 getBishopAttacksRays(int sq, U64 blockers);

      U64 getRookAttacks(int sq, U64 blockers);
      U64 getBishopAttacks(int sq, U64 blockers);

      void initPawnAttacks();
      void initKnightAttacks();
      void initKingAttacks();
   }
}
#endif